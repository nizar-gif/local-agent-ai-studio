import React, { useState } from 'react';
import { TaskExecution, Page, Job } from '../../types';
import { PauseIcon, PlayIcon, ArrowPathIcon, XCircleIcon, CpuChipIcon, CheckCircleIcon, ClockIcon, FolderOpenIcon, CodeBracketSquareIcon } from '../../components/shared/Icons';
import { useJobs } from '../../App';
import { v4 as uuidv4 } from 'uuid';

interface TaskDetailPanelProps {
    task: TaskExecution;
    setActivePage: (page: Page) => void;
    onCancel: () => void;
    onRetry: () => void;
    onPauseResume: () => void;
}

type ActiveTab = 'Overview' | 'Progress' | 'Logs' | 'Resources' | 'Artifacts' | 'Debug';

const TaskDetailPanel: React.FC<TaskDetailPanelProps> = ({ task, setActivePage, onCancel, onRetry, onPauseResume }) => {
    const { addJob } = useJobs();
    const [activeTab, setActiveTab] = useState<ActiveTab>('Overview');

    const handlePromoteToWorkflow = () => {
        addJob({
            name: `Create Workflow from Task: ${task.title}`,
            message: 'Generating workflow definition...',
        });
        setActivePage(Page.Workflows);
    };
    
    const renderContent = () => {
        switch (activeTab) {
            case 'Overview':
                return <div className="space-y-4">
                    <InfoItem label="Task ID" value={task.id} mono />
                    <InfoItem label="Status" value={task.status} />
                    <InfoItem label="Created By" value={task.createdBy} />
                    <InfoItem label="Priority" value={task.priority} />
                    <InfoItem label="Dependencies" value="None" />
                    <InfoItem label="Inputs" value={JSON.stringify(task.inputs, null, 2)} pre />
                    <InfoItem label="Output" value={task.output ? JSON.stringify(task.output, null, 2) : 'Not available.'} pre />
                </div>;
            case 'Progress':
                return <div className="space-y-3">
                    <ProgressStep icon={CheckCircleIcon} text="Agent assigned: Research Planner" status="completed" />
                    <ProgressStep icon={CheckCircleIcon} text="Tool call: FileReadTool" status="completed" />
                    <ProgressStep icon={ClockIcon} text="LLM call: Summarization" status="in_progress" />
                    <ProgressStep icon={ClockIcon} text="Tool call: FileWriteTool" status="pending" />
                </div>;
            case 'Logs':
                return <div className="font-mono text-xs bg-black p-2 rounded-md">
                    <p>[{task.startTime}] INFO: Task started by {task.createdBy}.</p>
                    <p>[{task.startTime}] INFO: Agent '{task.agent}' assigned.</p>
                </div>;
            case 'Resources':
                 return <div className="space-y-4">
                    <InfoItem label="Token Count" value="~1,250" />
                    <InfoItem label="Estimated Cost" value="$0.0015" />
                    <div className="p-4 bg-secondary rounded-lg border border-border">
                        <p className="text-sm font-bold">CPU / Memory</p>
                        <div className="h-24 mt-2 bg-background rounded-md flex items-center justify-center text-xs text-text-secondary">Chart Placeholder</div>
                    </div>
                     <div className="p-4 bg-secondary rounded-lg border border-border">
                        <p className="text-sm font-bold">GPU / VRAM</p>
                        <div className="h-24 mt-2 bg-background rounded-md flex items-center justify-center text-xs text-text-secondary">Chart Placeholder</div>
                    </div>
                </div>;
            case 'Artifacts':
                 return <div className="space-y-4">
                    <p className="text-text-secondary text-sm">Any files or reports generated by this task will be listed here.</p>
                     <div className="p-3 bg-secondary rounded-lg border border-border flex justify-between items-center">
                        <span className="font-mono text-sm">q4-report-final.pdf</span>
                        <FooterButton icon={FolderOpenIcon} text="Open in Files Page" onClick={() => setActivePage(Page.Files)} />
                    </div>
                </div>;
            case 'Debug':
                return <div className="text-text-secondary text-sm">Underlying execution trace or LangChain graph will be shown here.</div>;
            default: return null;
        }
    }

    return (
        <div className="p-6 h-full flex flex-col">
            <div className="flex-shrink-0">
                <div className="flex justify-between items-start">
                    <div>
                        <h3 className="text-xl font-bold">{task.title}</h3>
                        <p className="text-sm text-text-secondary">{task.type} via {task.agent}</p>
                    </div>
                    <div className="flex items-center gap-2">
                        {task.status === 'Running' && <ActionButton icon={PauseIcon} title="Pause Task" onClick={onPauseResume} />}
                        {task.status === 'Paused' && <ActionButton icon={PlayIcon} title="Resume Task" onClick={onPauseResume} />}
                        {task.status === 'Failed' && <ActionButton icon={ArrowPathIcon} title="Retry Task" onClick={onRetry} />}
                        {(task.status === 'Running' || task.status === 'Waiting' || task.status === 'Paused') && <ActionButton icon={XCircleIcon} title="Terminate Task" onClick={onCancel} />}
                    </div>
                </div>
                <div className="mt-4 border-b border-border">
                    <nav className="-mb-px flex space-x-4">
                        <TabButton name="Overview" activeTab={activeTab} setActiveTab={setActiveTab} />
                        <TabButton name="Progress" activeTab={activeTab} setActiveTab={setActiveTab} />
                        <TabButton name="Logs" activeTab={activeTab} setActiveTab={setActiveTab} />
                        <TabButton name="Resources" activeTab={activeTab} setActiveTab={setActiveTab} />
                        <TabButton name="Artifacts" activeTab={activeTab} setActiveTab={setActiveTab} />
                        <TabButton name="Debug" activeTab={activeTab} setActiveTab={setActiveTab} />
                    </nav>
                </div>
            </div>
            <div className="flex-1 py-6 overflow-y-auto">
                {renderContent()}
            </div>
            <div className="flex-shrink-0 border-t border-border pt-4 space-y-3">
                <div className="flex gap-2">
                    <FooterButton icon={FolderOpenIcon} text="Open Origin" onClick={() => setActivePage(Page.Chat)} />
                    <FooterButton icon={CodeBracketSquareIcon} text="Promote to Workflow" onClick={handlePromoteToWorkflow} />
                </div>
                <div className="text-xs font-mono text-text-secondary flex justify-between">
                    <span>Start: {task.startTime}</span>
                    <span>Elapsed: {task.duration}</span>
                </div>
            </div>
        </div>
    );
};

const ActionButton: React.FC<{icon: React.FC<{className: string}>, title: string, onClick: () => void}> = ({ icon: Icon, title, onClick}) => (
    <button onClick={onClick} className='p-1.5 rounded-md text-text-secondary hover:bg-secondary' title={title}>
        <Icon className="h-5 w-5" />
    </button>
);

const FooterButton: React.FC<{icon: React.FC<{className: string}>, text: string, onClick: () => void}> = ({ icon: Icon, text, onClick}) => (
    <button onClick={onClick} className='flex items-center gap-2 text-sm font-semibold bg-secondary hover:bg-background py-1.5 px-3 rounded-md'>
        <Icon className="h-4 w-4" /> {text}
    </button>
);


const TabButton: React.FC<{ name: ActiveTab, activeTab: ActiveTab, setActiveTab: (tab: ActiveTab) => void }> = ({ name, activeTab, setActiveTab }) => (
    <button 
        onClick={() => setActiveTab(name)}
        className={`py-2 px-1 border-b-2 font-medium text-sm ${activeTab === name ? 'border-primary text-primary' : 'border-transparent text-text-secondary hover:text-text-primary hover:border-gray-300'}`}
    >
        {name}
    </button>
);

const InfoItem: React.FC<{label: string, value: string, pre?: boolean, mono?: boolean}> = ({ label, value, pre, mono }) => (
    <div>
        <p className="text-xs font-semibold text-text-secondary uppercase">{label}</p>
        {pre ? (
            <pre className="text-sm mt-1 text-text-primary bg-secondary p-2 rounded-md whitespace-pre-wrap font-mono text-xs">{value}</pre>
        ) : (
            <p className={`text-sm mt-1 text-text-primary ${mono ? 'font-mono' : ''}`}>{value}</p>
        )}
    </div>
);

const ProgressStep: React.FC<{ icon: React.FC<any>, text: string, status: 'completed' | 'in_progress' | 'pending' }> = ({ icon: Icon, text, status}) => {
    const color = {
        completed: 'text-green-400',
        in_progress: 'text-blue-400',
        pending: 'text-text-secondary'
    }[status];
     const animation = status === 'in_progress' ? 'animate-pulse' : '';
    return (
        <div className={`flex items-center gap-3 text-sm ${color} ${animation}`}>
            <Icon className="h-5 w-5" />
            <span>{text}</span>
        </div>
    )
};


export default TaskDetailPanel;